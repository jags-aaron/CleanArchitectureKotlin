apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.n3k0.amplemindcleanarchitecture"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    ext {
        constraint_layout = "2.0.0-alpha2"
        junit = "4.12"
        support = "1.0.0"
        test_runner = "1.1.0-alpha4"
        espresso_core = "3.1.0-alpha4"
        dagger = "2.16"
        okhttp_logging_interceptor = "3.10.0"
        retrofit = "2.4.0"
        ktx = "1.0.0"
        coroutines = "0.22.1"
        mockito = '1.10.19'
        powerMockito = '1.6.2'
        hamcrest = '1.3'
        arch_viewmodel = "1.1.1"
        rx_android = "2.0.2"
        rx_binding_core = "2.1.1"
        rx_binding_v4 = "2.1.1"
        rx_binding_v7 = "2.1.1"
        rx_java = "2.1.14"
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'

    // support
    implementation "androidx.legacy:legacy-support-v4:$support"
    implementation "androidx.appcompat:appcompat:$support"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout"

    // Glide
    implementation "com.github.2coffees1team:GlideToVectorYou:v1.1.0"

    // kotlin KTX
    implementation "androidx.core:core-ktx:$ktx"

    // Android Architecture
    implementation "android.arch.lifecycle:extensions:$arch_viewmodel"
    implementation "android.arch.lifecycle:viewmodel:$arch_viewmodel"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // testing
    testImplementation "junit:junit:$junit"
    testImplementation "org.mockito:mockito-all:$mockito"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrest"
    testImplementation "org.powermock:powermock-module-junit4:$powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$powerMockito"
    androidTestImplementation "androidx.test:runner:$test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"

    // dagger
    implementation "com.google.dagger:dagger:$dagger"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"
    kapt "com.google.dagger:dagger-android-processor:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"

    //rx
    implementation "io.reactivex.rxjava2:rxjava:$rx_java"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rx_binding_core"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rx_binding_v4"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rx_binding_v7"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_interceptor"
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
